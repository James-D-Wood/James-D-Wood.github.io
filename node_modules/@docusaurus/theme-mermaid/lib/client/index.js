"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMermaidSvg = exports.useMermaidConfig = exports.useMermaidThemeConfig = exports.MermaidContainerClassName = void 0;
const tslib_1 = require("tslib");
const react_1 = require("react");
const theme_common_1 = require("@docusaurus/theme-common");
const mermaid_1 = tslib_1.__importDefault(require("mermaid"));
// Stable className to allow users to easily target with CSS
exports.MermaidContainerClassName = 'docusaurus-mermaid-container';
function useMermaidThemeConfig() {
    return (0, theme_common_1.useThemeConfig)().mermaid;
}
exports.useMermaidThemeConfig = useMermaidThemeConfig;
function useMermaidConfig() {
    const { colorMode } = (0, theme_common_1.useColorMode)();
    const mermaidThemeConfig = useMermaidThemeConfig();
    const theme = mermaidThemeConfig.theme[colorMode];
    const { options } = mermaidThemeConfig;
    return (0, react_1.useMemo)(() => ({ startOnLoad: false, ...options, theme }), [theme, options]);
}
exports.useMermaidConfig = useMermaidConfig;
function useMermaidSvg(txt, mermaidConfigParam) {
    /*
    For flexibility, we allow the hook to receive a custom Mermaid config
    The user could inject a modified version of the default config for example
     */
    const defaultMermaidConfig = useMermaidConfig();
    const mermaidConfig = mermaidConfigParam ?? defaultMermaidConfig;
    return (0, react_1.useMemo)(() => {
        /*
        Mermaid API is really weird :s
        It is a big mutable singleton with multiple config levels
        Note: most recent API type definitions are missing
    
        There are 2 kind of configs:
    
        - siteConfig: some kind of global/protected shared config
          you can only set with "initialize"
    
        - config/currentConfig
          the config the renderer will use
          it is reset to siteConfig before each render
          but it can be altered by the mermaid txt content itself through directives
    
        To use a new mermaid config (on colorMode change for example) we should
        update siteConfig, and it can only be done with initialize()
         */
        mermaid_1.default.mermaidAPI.initialize(mermaidConfig);
        /*
        Random client-only id, we don't care much about it
        But mermaid want an id so...
        */
        const mermaidId = `mermaid-svg-${Math.round(Math.random() * 10000000)}`;
        /*
        Not even documented: mermaid.render returns the svg string
        Using the documented form is un-necessary
         */
        return mermaid_1.default.render(mermaidId, txt);
    }, [txt, mermaidConfig]);
}
exports.useMermaidSvg = useMermaidSvg;
